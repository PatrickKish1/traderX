coinbase trade docs:
Advanced Trade API Authentication

This guide explains how to authenticate requests to the Advanced Trade REST API endpoints and WebSocket server channels. It assumes that you have already created API keys on the Coinbase Developer Platform.

Warning

Advanced Trade API supports ECDSA CDP keys only and not yet new Ed25519 keys. Advanced Trade API will be updated to support Ed25519 keys in the future and will continue to support ECDSA keys.
Making Requests

CDP API keys are used to generate a JSON Web Token (JWT) for an API. Once you've generated a JWT, set it as a Authorization Bearer header to make an authenticated request.

# Example request to get account
curl -H "Authorization: Bearer $JWT" 'https://api.coinbase.com/api/v3/brokerage/accounts/f603f97c-37d7-4e58-b264-c27e9e393dd9'

Generating a JWT

Regardless of which code snippet you use, follow these steps:

    Replace key name and key secret with your key name and private key. key secret is a multi-line key and newlines must be preserved to properly parse the key. Do this on one line with \n escaped newlines, or with a multi-line string.
    Replace the request method and path you want to test. If the URI has a UUID in the path, include that UUID here, e.g., /api/v3/brokerage/accounts/f603f97c-37d7-4e58-b264-c27e9e393dd9, but do not include query parameters in the path.
    Run the generation script that prints the command export JWT=....
    Run the generated command to save your JWT.


Caution

    Your JWT expires after 2 minutes, after which all requests are unauthenticated.
    You must generate a different JWT for each unique API request.
    Do not include query parameters in your request path

Code Samples

The easiest way to generate a JWT is to use the built-in functions in our Python SDK as described below.

Otherwise, use the code samples below to generate/export a JWT and make an authenticated request.

    Install the JSON Web Token and TypeScript dependencies:

    npm install jsonwebtoken
    npm install @types/jsonwebtoken
    npm install -g typescript

Create a TypeScript file named main.ts and add the following code:

import * as jwt from 'jsonwebtoken';
import * as crypto from 'crypto';

const keyName = 'organizations/{org_id}/apiKeys/{key_id}';
const keySecret = `-----BEGIN EC PRIVATE KEY-----
YOUR PRIVATE KEY
-----END EC PRIVATE KEY-----`;
const requestMethod = 'GET';
const requestHost = 'api.coinbase.com';
const requestPath = '/api/v3/brokerage/accounts';
const algorithm = 'ES256';

const uri = `${requestMethod} ${requestHost}${requestPath}`;

const generateJWT = (): string => {
  const payload = {
    iss: 'cdp',
    nbf: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 120,
    sub: keyName,
    uri,
  };

  const header = {
    alg: algorithm,
    kid: keyName,
    nonce: crypto.randomBytes(16).toString('hex'),
  };

  return jwt.sign(payload, keySecret, { algorithm, header });
};

const main = () => {
  const token = generateJWT();
  console.log(token);
};

main();

Compile the TypeScript file to JavaScript:

tsc main.ts

This will generate a main.js file.

Run the generated JavaScript file:

node main.js

Set the JWT to the output, or export the JWT to the environment with:

export JWT=$(node main.js)

Make your request, example:

curl -H "Authorization: Bearer $JWT" 'https://api.coinbase.com/api/v3/brokerage/accounts'

    Code Snippet

import * as jwt from 'jsonwebtoken';
import * as crypto from 'crypto';

const keyName = 'organizations/{org_id}/apiKeys/{key_id}';
const keySecret = `-----BEGIN EC PRIVATE KEY-----
YOUR PRIVATE KEY
-----END EC PRIVATE KEY-----`;
const requestMethod = 'GET';
const requestHost = 'api.coinbase.com';
const requestPath = '/api/v3/brokerage/accounts';
const algorithm = 'ES256';

const uri = `${requestMethod} ${requestHost}${requestPath}`;

const generateJWT = (): string => {
  const payload = {
    iss: 'cdp',
    nbf: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 120,
    sub: keyName,
    uri,
  };

  const header = {
    alg: algorithm,
    kid: keyName,
    nonce: crypto.randomBytes(16).toString('hex'),
  };

  return jwt.sign(payload, keySecret, { algorithm, header });
};

const main = () => {
  const token = generateJWT();
  console.log(token);
};

main();


ENDPOINTS
request:
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/accounts/:account_uuid',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


response:
{
  "account": {
    "uuid": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
    "name": "BTC Wallet",
    "currency": "BTC",
    "available_balance": {
      "value": "1.23",
      "currency": "BTC"
    },
    "default": false,
    "active": true,
    "created_at": "2021-05-31T09:59:59Z",
    "updated_at": "2021-05-31T09:59:59Z",
    "deleted_at": "2021-05-31T09:59:59Z",
    "type": "FIAT",
    "ready": true,
    "hold": {
      "value": "1.23",
      "currency": "BTC"
    },
    "retail_portfolio_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "platform": "ACCOUNT_PLATFORM_CONSUMER"
  }
}



REQUEST:
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/accounts',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});



response:
{
  "accounts": {
    "uuid": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
    "name": "BTC Wallet",
    "currency": "BTC",
    "available_balance": {
      "value": "1.23",
      "currency": "BTC"
    },
    "default": false,
    "active": true,
    "created_at": "2021-05-31T09:59:59Z",
    "updated_at": "2021-05-31T09:59:59Z",
    "deleted_at": "2021-05-31T09:59:59Z",
    "type": "FIAT",
    "ready": true,
    "hold": {
      "value": "1.23",
      "currency": "BTC"
    },
    "retail_portfolio_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "platform": "ACCOUNT_PLATFORM_CONSUMER"
  },
  "has_next": true,
  "cursor": "789100",
  "size": "integer"
}



request:
const axios = require('axios');

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/convert/trade/:trade_id',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


respoinse:
{
  "trade": {
    "id": "string",
    "status": "TRADE_STATUS_UNSPECIFIED",
    "user_entered_amount": {
      "value": "string",
      "currency": "string"
    },
    "amount": {
      "value": "string",
      "currency": "string"
    },
    "subtotal": {
      "value": "string",
      "currency": "string"
    },
    "total": {
      "value": "string",
      "currency": "string"
    },
    "fees": [
      {
        "title": "string",
        "description": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "label": "string",
        "disclosure": {
          "title": "string",
          "description": "string",
          "link": {
            "text": "string",
            "url": "string"
          }
        },
        "waived_details": {
          "amount": {
            "value": "string",
            "currency": "string"
          },
          "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
        }
      }
    ],
    "total_fee": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "source": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "target": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "unit_price": {
      "target_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "target_to_source": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "source_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      }
    },
    "user_warnings": [
      {
        "id": "string",
        "link": {
          "text": "string",
          "url": "string"
        },
        "context": {
          "details": [
            "string"
          ],
          "title": "string",
          "link_text": "string"
        },
        "code": "string",
        "message": "string"
      }
    ],
    "user_reference": "string",
    "source_currency": "string",
    "target_currency": "string",
    "cancellation_reason": {
      "message": "string",
      "code": "string",
      "error_code": "ERROR_CODES_UNSPECIFIED",
      "error_cta": "ERROR_CTA_UNSPECIFIED",
      "error_metadata": {
        "limit_amount": {
          "value": "string",
          "currency": "string"
        }
      },
      "title": "string"
    },
    "source_id": "string",
    "target_id": "string",
    "subscription_info": {
      "free_trading_reset_date": "string",
      "used_zero_fee_trading": {
        "value": "string",
        "currency": "string"
      },
      "remaining_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "max_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "has_benefit_cap": "boolean",
      "applied_subscription_benefit": "boolean",
      "fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      },
      "payment_method_fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      }
    },
    "exchange_rate": {
      "value": "string",
      "currency": "string"
    },
    "tax_details": [
      {
        "name": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        }
      }
    ],
    "trade_incentive_info": {
      "applied_incentive": "boolean",
      "user_incentive_id": "string",
      "code_val": "string",
      "ends_at": "string",
      "fee_without_incentive": {
        "value": "string",
        "currency": "string"
      },
      "redeemed": "boolean"
    },
    "total_fee_without_tax": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "fiat_denoted_total": {
      "value": "string",
      "currency": "string"
    }
  }
}



Create Convert Quote
POST

https://api.coinbase.com/api/v3/brokerage/convert/quote

Create a convert quote with a specified source account, target account, and amount. Convert is applicable for USDC-USD and EURC-EUR conversion
Body params
from_account
string
required

The currency of the account to convert from (e.g. USD).
to_account
string
required

The currency of the account to convert to (e.g. USDC).
amount
string
required

The amount to be converted (denominated in the currency specified in from_account).
trade_incentive_metadata
object

Trade incentive to waive trade fees.
user_incentive_id
string

The user incentive id.
code_val
string

A promo code for waiving fees.
request:
const axios = require('axios');

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/convert/quote',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});



reponse:
{
  "trade": {
    "id": "string",
    "status": "TRADE_STATUS_UNSPECIFIED",
    "user_entered_amount": {
      "value": "string",
      "currency": "string"
    },
    "amount": {
      "value": "string",
      "currency": "string"
    },
    "subtotal": {
      "value": "string",
      "currency": "string"
    },
    "total": {
      "value": "string",
      "currency": "string"
    },
    "fees": [
      {
        "title": "string",
        "description": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "label": "string",
        "disclosure": {
          "title": "string",
          "description": "string",
          "link": {
            "text": "string",
            "url": "string"
          }
        },
        "waived_details": {
          "amount": {
            "value": "string",
            "currency": "string"
          },
          "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
        }
      }
    ],
    "total_fee": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "source": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "target": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "unit_price": {
      "target_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "target_to_source": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "source_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      }
    },
    "user_warnings": [
      {
        "id": "string",
        "link": {
          "text": "string",
          "url": "string"
        },
        "context": {
          "details": [
            "string"
          ],
          "title": "string",
          "link_text": "string"
        },
        "code": "string",
        "message": "string"
      }
    ],
    "user_reference": "string",
    "source_currency": "string",
    "target_currency": "string",
    "cancellation_reason": {
      "message": "string",
      "code": "string",
      "error_code": "ERROR_CODES_UNSPECIFIED",
      "error_cta": "ERROR_CTA_UNSPECIFIED",
      "error_metadata": {
        "limit_amount": {
          "value": "string",
          "currency": "string"
        }
      },
      "title": "string"
    },
    "source_id": "string",
    "target_id": "string",
    "subscription_info": {
      "free_trading_reset_date": "string",
      "used_zero_fee_trading": {
        "value": "string",
        "currency": "string"
      },
      "remaining_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "max_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "has_benefit_cap": "boolean",
      "applied_subscription_benefit": "boolean",
      "fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      },
      "payment_method_fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      }
    },
    "exchange_rate": {
      "value": "string",
      "currency": "string"
    },
    "tax_details": [
      {
        "name": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        }
      }
    ],
    "trade_incentive_info": {
      "applied_incentive": "boolean",
      "user_incentive_id": "string",
      "code_val": "string",
      "ends_at": "string",
      "fee_without_incentive": {
        "value": "string",
        "currency": "string"
      },
      "redeemed": "boolean"
    },
    "total_fee_without_tax": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "fiat_denoted_total": {
      "value": "string",
      "currency": "string"
    }
  }
}


Get Convert Trade
GET

https://api.coinbase.com/api/v3/brokerage/convert/trade/{trade_id}

Gets a list of information about a convert trade with a specified trade id, source account, and target account
Path Params
trade_id
string
required

The ID of the trade to commit.
Query Params
from_account
string
required

The currency of the account to convert from (e.g. USD).
to_account
string
required

The currency of the account to convert to (e.g. USDC).

reques:
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/convert/trade/:trade_id',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});



response:
{
  "trade": {
    "id": "string",
    "status": "TRADE_STATUS_UNSPECIFIED",
    "user_entered_amount": {
      "value": "string",
      "currency": "string"
    },
    "amount": {
      "value": "string",
      "currency": "string"
    },
    "subtotal": {
      "value": "string",
      "currency": "string"
    },
    "total": {
      "value": "string",
      "currency": "string"
    },
    "fees": [
      {
        "title": "string",
        "description": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "label": "string",
        "disclosure": {
          "title": "string",
          "description": "string",
          "link": {
            "text": "string",
            "url": "string"
          }
        },
        "waived_details": {
          "amount": {
            "value": "string",
            "currency": "string"
          },
          "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
        }
      }
    ],
    "total_fee": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "source": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "target": {
      "type": "INVALID",
      "network": "string",
      "payment_method_id": "string",
      "blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "coinbase_account": {
        "account_id": "string"
      },
      "blockchain_transaction": {
        "hsh": "string",
        "height": "integer"
      },
      "fedwire": {
        "routing_number": "string",
        "account_holder": {
          "legal_name": "string",
          "account_number": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          }
        },
        "bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        },
        "intermediary_bank": {
          "name": "string",
          "address": {
            "lines": [
              "string"
            ],
            "country_code": "string"
          },
          "identifier": "string",
          "type": "CHIPS_IDENTIFIER",
          "identifier_code": "string"
        }
      },
      "swift": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string",
          "domestic_account_id": "string",
          "customer_payment_address1": "string",
          "customer_payment_address2": "string",
          "customer_payment_address3": "string",
          "customer_payment_country_code": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        },
        "intermediary": {
          "bic": "string",
          "name": "string",
          "bank_address1": "string",
          "bank_address2": "string",
          "bank_address3": "string",
          "bank_country_code": "string",
          "domestic_bank_id": "string",
          "international_bank_id": "string"
        }
      },
      "card": {
        "first_data_token": {
          "value": "string",
          "store_id": "string"
        },
        "expiry_date": {
          "month": "string",
          "year": "string"
        },
        "postal_code": "string",
        "merchant": {
          "mid": "string"
        },
        "vault_token": {
          "value": "string",
          "vault_id": "string"
        },
        "worldpay_params": {
          "token_value": "string",
          "uses_merchant_token": "boolean",
          "accept_header": "string",
          "user_agent_header": "string",
          "shopper_ip": "string",
          "shopper_session_id": "string"
        },
        "previous_scheme_tx_id": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "phone_number": "string",
        "user_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "six_digit_bin": "string",
        "last_four": "string",
        "customer_dob": {
          "month": "string",
          "day": "string",
          "year": "string"
        },
        "scheme": "UNKNOWN",
        "eight_digit_bin": "string",
        "checkout_token": {
          "source_id": "string"
        }
      },
      "zengin": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "uk": {
        "account_holder": {
          "legal_name": "string",
          "bban": "string",
          "sort_code": "string",
          "account_number": "string",
          "address": {
            "address1": "string",
            "address2": "string",
            "city": "string",
            "state": "string",
            "postal_code": "string",
            "country": "string"
          }
        },
        "institution": {
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "sepa": {
        "account_holder": {
          "legal_name": "string",
          "iban": "string",
          "bban": "string"
        },
        "institution": {
          "bic": "string",
          "name": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string"
      },
      "paypal": {
        "account_holder": {
          "paypal_id": "string",
          "paypal_pm_id": "string"
        },
        "merchant": {
          "merchant_account_id": "string"
        },
        "metadata": {
          "paypal_correlation_id": "string"
        }
      },
      "ledger_account": {
        "account_id": "string",
        "currency": "string",
        "owner": {
          "id": "string",
          "uuid": "string",
          "user_uuid": "string",
          "type": "UNKNOWN"
        }
      },
      "external_payment_method": {
        "payment_method_id": "string"
      },
      "pro_account": {
        "account_id": "string",
        "coinbase_account_id": "string",
        "user_id": "string",
        "currency": "string",
        "portfolio_id": "string"
      },
      "rtp": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string"
        },
        "institution": {
          "routing_number": "string"
        }
      },
      "venue": {
        "name": "string"
      },
      "ledger_named_account": {
        "name": "string",
        "currency": "string",
        "foreign_network": "string"
      },
      "custodial_pool": {
        "name": "string",
        "network": "string",
        "fiat_id": "string"
      },
      "apple_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "apple_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "default_account": {
        "user_uuid": "string",
        "currency": "string"
      },
      "remitly": {
        "account_holder": {
          "recipient_id": "string",
          "payout_method_type": "string"
        }
      },
      "pro_internal_account": {
        "user_id": "string",
        "currency": "string"
      },
      "dapp_wallet_account": {
        "user_uuid": "string",
        "network": "string",
        "cohort_id": "string",
        "signing_backend": "string",
        "currency": "string"
      },
      "google_pay": {
        "braintree": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "google_pay": {
          "nonce": "string",
          "correlation_id": "string"
        },
        "user_id": "string",
        "postal_code": "string",
        "customer_name": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "six_digit_bin": "string",
        "last_four": "string",
        "issuing_country": "string",
        "issuing_bank": "string",
        "product_id": "string",
        "scheme": "UNKNOWN",
        "prepaid": "UNCERTAIN",
        "debit": "UNCERTAIN"
      },
      "dapp_wallet_blockchain_address": {
        "network": "string",
        "address": "string",
        "cohort_id": "string",
        "user_uuid": "string",
        "pool": "string"
      },
      "zaakpay_mobikwik": {
        "phone_number": "string"
      },
      "deneb_upi": {
        "vpa_id": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "bank_account": {
        "customer_account_type": "string",
        "customer_account_number": "string",
        "customer_routing_number": "string",
        "customer_name": "string"
      },
      "identity_contract_call": {
        "network": "string",
        "address": "string"
      },
      "deneb_imps": {
        "ifsc_code": "string",
        "account_number": "string",
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "pan": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        }
      },
      "allocation": {
        "id": "string",
        "legs": [
          {
            "id": "string",
            "movements": [
              {
                "id": "string",
                "source_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "destination_account": {
                  "account_id": "string",
                  "currency": "string",
                  "owner": {
                    "id": "string",
                    "uuid": "string",
                    "user_uuid": "string",
                    "type": "UNKNOWN"
                  }
                },
                "amount": {
                  "amount": "string",
                  "currency": "string"
                }
              }
            ],
            "is_netted": "boolean"
          }
        ],
        "is_netted": "boolean"
      },
      "liquidity_pool": {
        "network": "string",
        "pool": "string",
        "currency": "string",
        "account_id": "string",
        "from_address": "string"
      },
      "zengin_v2": {
        "account_holder": {
          "legal_name": "string",
          "identifier": "string",
          "type": "string"
        },
        "institution": {
          "bank_code": "string",
          "branch_code": "string"
        }
      },
      "direct_deposit": {
        "direct_deposit_account": "string"
      },
      "sepa_v2": {
        "account": {
          "legal_name": "string",
          "iban": "string"
        },
        "customer_first_name": "string",
        "customer_last_name": "string",
        "email": "string",
        "phone_number": "string",
        "customer_country": "string",
        "address": {
          "address1": "string",
          "address2": "string",
          "city": "string",
          "state": "string",
          "postal_code": "string",
          "country": "string"
        },
        "supports_open_banking": "boolean"
      },
      "zepto": {
        "account": {
          "contact_id": "string",
          "bank_account_id": "string"
        }
      },
      "pix_ebanx": {
        "payment_method_id": "string",
        "user_uuid": "string",
        "deposit": {
          "transaction_id": "string",
          "account_id": "string"
        },
        "withdrawal": {
          "account_number": "string",
          "account_type": "string",
          "bank_code": "string",
          "branch_number": "string",
          "pix_key": "string"
        }
      },
      "signet": {
        "signet_wallet_id": "string"
      },
      "derivative_settlement": {
        "account_settlements": [
          {
            "amount": {
              "amount": "string",
              "currency": "string"
            },
            "source_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "source_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "target_ledger_account": {
              "account_id": "string",
              "currency": "string",
              "owner": {
                "id": "string",
                "uuid": "string",
                "user_uuid": "string",
                "type": "UNKNOWN"
              }
            },
            "target_ledger_named_account": {
              "name": "string",
              "currency": "string",
              "foreign_network": "string"
            },
            "hold_id_to_replace": "string",
            "new_hold_id": "string",
            "new_hold_amount": {
              "amount": "string",
              "currency": "string"
            },
            "existing_hold_id": "string"
          }
        ],
        "equity_reset": {
          "amount": {
            "amount": "string",
            "currency": "string"
          },
          "equity_account": {
            "account_id": "string",
            "currency": "string",
            "owner": {
              "id": "string",
              "uuid": "string",
              "user_uuid": "string",
              "type": "UNKNOWN"
            }
          }
        }
      },
      "user": {
        "user_uuid": "string"
      },
      "sg_fast": {
        "account": {
          "customer_name": "string",
          "account_number": "string"
        },
        "institution": {
          "bank_code": "string"
        }
      },
      "interac": {
        "pmsvc_id": "string",
        "account": {
          "account_name": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "intra_bank": {
        "currency": "string",
        "account_number": "string",
        "routing_number": "string",
        "customer_name": "string",
        "fiat_id": "string"
      },
      "cbit": {
        "cbit_wallet_address": "string",
        "customers_bank_account_id": "string"
      },
      "ideal": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sofort": {
        "currency": "string",
        "iban": "string",
        "bic": "string",
        "bank_name": "string",
        "customer_payment_name": "string",
        "customer_country_code": "string"
      },
      "sg_paynow": {
        "identifier_type": "TYPE_UNSPECIFIED",
        "identifier": "string",
        "customer_name": "string"
      },
      "checkout_payment_link": {
        "payment_link_id": "string"
      },
      "email_address": {
        "value": "string"
      },
      "phone_number": {
        "value": "string"
      },
      "vendor_payment": {
        "vendor_name": "string",
        "vendor_payment_id": "string"
      },
      "ctn": {
        "id": "string"
      },
      "bancomat_pay": {
        "customer_name": "string",
        "account": {
          "phone_number": "string"
        }
      },
      "hot_wallet": {
        "network": "string",
        "address": "string"
      },
      "nova_account": {
        "network": "string",
        "nova_account_id": "string",
        "pool_name": "string",
        "account_idempotency_key": "string"
      },
      "magic_spend_blockchain_address": {
        "address": "string",
        "destination_tag": "string"
      },
      "transfer_pointer": {
        "idem": "string"
      },
      "eft": {
        "account": {
          "account_name": "string",
          "account_phone_number": "string",
          "account_email": "string",
          "institution_number": "string",
          "transit_number": "string",
          "account_number": "string"
        }
      },
      "wallace_account": {
        "wallace_account_id": "string",
        "pool_name": "string"
      },
      "manual": {
        "settlement_bank_name": "string",
        "settlement_account_number": "string",
        "reference": "string"
      },
      "argentine_bank_account": {
        "tax_id": "string",
        "cbu": "string"
      },
      "representment": {
        "currency": "string"
      },
      "banking_circle_now": {
        "iban": "string",
        "currency": "string",
        "customer_payment_name": "string"
      },
      "trustly": {
        "country": "string",
        "iban": "string",
        "account_holder": "string",
        "bank_code": "string",
        "account_number": "string",
        "partial_account_number": "string",
        "bank_name": "string",
        "email": "string"
      },
      "blik": {
        "email": "string",
        "country": "string",
        "account_holder": "string"
      },
      "mb_way": null,
      "pix": {
        "account_number": "string",
        "account_type": "string",
        "bank_code": "string",
        "bank_name": "string",
        "branch_number": "string",
        "customer_payment_name": "string",
        "sender_document": "string",
        "pix_key": "string"
      }
    },
    "unit_price": {
      "target_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "target_to_source": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      },
      "source_to_fiat": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "scale": "integer"
      }
    },
    "user_warnings": [
      {
        "id": "string",
        "link": {
          "text": "string",
          "url": "string"
        },
        "context": {
          "details": [
            "string"
          ],
          "title": "string",
          "link_text": "string"
        },
        "code": "string",
        "message": "string"
      }
    ],
    "user_reference": "string",
    "source_currency": "string",
    "target_currency": "string",
    "cancellation_reason": {
      "message": "string",
      "code": "string",
      "error_code": "ERROR_CODES_UNSPECIFIED",
      "error_cta": "ERROR_CTA_UNSPECIFIED",
      "error_metadata": {
        "limit_amount": {
          "value": "string",
          "currency": "string"
        }
      },
      "title": "string"
    },
    "source_id": "string",
    "target_id": "string",
    "subscription_info": {
      "free_trading_reset_date": "string",
      "used_zero_fee_trading": {
        "value": "string",
        "currency": "string"
      },
      "remaining_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "max_free_trading_volume": {
        "value": "string",
        "currency": "string"
      },
      "has_benefit_cap": "boolean",
      "applied_subscription_benefit": "boolean",
      "fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      },
      "payment_method_fee_without_subscription_benefit": {
        "value": "string",
        "currency": "string"
      }
    },
    "exchange_rate": {
      "value": "string",
      "currency": "string"
    },
    "tax_details": [
      {
        "name": "string",
        "amount": {
          "value": "string",
          "currency": "string"
        }
      }
    ],
    "trade_incentive_info": {
      "applied_incentive": "boolean",
      "user_incentive_id": "string",
      "code_val": "string",
      "ends_at": "string",
      "fee_without_incentive": {
        "value": "string",
        "currency": "string"
      },
      "redeemed": "boolean"
    },
    "total_fee_without_tax": {
      "title": "string",
      "description": "string",
      "amount": {
        "value": "string",
        "currency": "string"
      },
      "label": "string",
      "disclosure": {
        "title": "string",
        "description": "string",
        "link": {
          "text": "string",
          "url": "string"
        }
      },
      "waived_details": {
        "amount": {
          "value": "string",
          "currency": "string"
        },
        "source": "WAIVED_FEE_SOURCE_UNSPECIFIED"
      }
    },
    "fiat_denoted_total": {
      "value": "string",
      "currency": "string"
    }
  }
}


reques:
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/key_permissions',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


response:
{
  "can_view": "boolean",
  "can_trade": "boolean",
  "can_transfer": "boolean",
  "portfolio_uuid": "string",
  "portfolio_type": "string"
}



PRODUCT TYPES:
UNKOWN_PRODUCT_TYPE
SPOT
FUTURE

CONTRCT-EXPIRY TYPES:
UNKNOWN_CONTRACT_EXPIRY_TYPE
EXPIRING
PERPETUAL

PRODUCT VENUE:
UNKNOWN_VENUE_TYPE
CBE
FCM
INTX


request;
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/transaction_summary?product_type=SPOT&contract_expiry_type=PERPETUAL&product_venue=CBE',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


response:
{
  "total_volume": 1000,
  "total_fees": 25,
  "fee_tier": {
    "pricing_tier": "<$10k",
    "usd_from": "0",
    "usd_to": "10,000",
    "taker_fee_rate": "0.0010",
    "maker_fee_rate": "0.0020",
    "aop_from": "0",
    "aop_to": "10000",
    "perps_vol_from": "0",
    "perps_vol_to": "10000"
  },
  "margin_rate": 0.5,
  "goods_and_services_tax": {
    "rate": "string",
    "type": "INCLUSIVE"
  },
  "advanced_trade_only_volume": 1000,
  "advanced_trade_only_fees": 25,
  "coinbase_pro_volume": 1000,
  "coinbase_pro_fees": 25,
  "total_balance": "1000"
}


Close Position
POST

https://api.coinbase.com/api/v3/brokerage/orders/close_position

Places an order to close any open positions for a specified product_id.
Body params
client_order_id
string
required

The unique ID provided for the order (used for identification purposes).
Example: 0000-00000-000000
product_id
string
required

The trading pair (e.g. 'BIT-28JUL23-CDE').
Example: BIT-28JUL23-CDE
size
string

The amount of contracts that should be closed.
Example: 3

reques:
const axios = require('axios');

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/orders/close_position',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});

reponse:
{
  "success": true,
  "success_response": {
    "order_id": "11111-00000-000000",
    "product_id": "BTC-USD",
    "side": "",
    "client_order_id": "0000-00000-000000"
  },
  "error_response": {
    "error": "UNKNOWN_FAILURE_REASON",
    "message": "The order configuration was invalid",
    "error_details": "Market orders cannot be placed with empty order sizes",
    "preview_failure_reason": "UNKNOWN_PREVIEW_FAILURE_REASON",
    "new_order_failure_reason": "UNKNOWN_FAILURE_REASON"
  },
  "order_configuration": {
    "market_market_ioc": {
      "quote_size": "10.00",
      "base_size": "0.001"
    },
    "sor_limit_ioc": {
      "quote_size": "10.00",
      "base_size": "0.001",
      "limit_price": "10000.00"
    },
    "limit_limit_gtc": {
      "quote_size": "10.00",
      "base_size": "0.001",
      "limit_price": "10000.00",
      "post_only": false
    },
    "limit_limit_gtd": {
      "quote_size": "10.00",
      "base_size": "0.001",
      "limit_price": "10000.00",
      "end_time": "2021-05-31T09:59:59Z",
      "post_only": false
    },
    "limit_limit_fok": {
      "quote_size": "10.00",
      "base_size": "0.001",
      "limit_price": "10000.00"
    },
    "twap_limit_gtd": {
      "quote_size": "10.00",
      "base_size": "0.001",
      "start_time": "2021-05-31T07:59:59Z",
      "end_time": "2021-05-31T09:59:59Z",
      "limit_price": "10000.00",
      "number_buckets": "5",
      "bucket_size": "2.00",
      "bucket_duration": "300s"
    },
    "stop_limit_stop_limit_gtc": {
      "base_size": "0.001",
      "limit_price": "10000.00",
      "stop_price": "20000.00",
      "stop_direction": "20000.00"
    },
    "stop_limit_stop_limit_gtd": {
      "base_size": 0.001,
      "limit_price": "10000.00",
      "stop_price": "20000.00",
      "end_time": "2021-05-31T09:59:59Z",
      "stop_direction": "20000.00"
    },
    "trigger_bracket_gtc": {
      "base_size": 0.001,
      "limit_price": "10000.00",
      "stop_trigger_price": "20000.00"
    },
    "trigger_bracket_gtd": {
      "base_size": 0.001,
      "limit_price": "10000.00",
      "stop_trigger_price": "20000.00",
      "end_time": "2021-05-31T09:59:59Z"
    }
  }
}



Create Order
POST

https://api.coinbase.com/api/v3/brokerage/orders

Create an order with a specified product_id (asset-pair), side (buy/sell), etc.
Body params
client_order_id
string
required

A unique ID provided for the order (used for identification purposes). If the ID provided is not unique, the order will not be created and the order corresponding with that ID will be returned instead.
Example: 0000-00000-000000
product_id
string
required

The trading pair (e.g. 'BTC-USD').
Example: BTC-USD
side
string
required

The side of the market that the order is on (e.g. 'BUY', 'SELL').

Possible values: [BUY, SELL]
​
order_configuration
object
required

The configuration of the order (e.g. the order type, size, etc).
market_market_ioc
object

Buy or sell a specified quantity of an Asset at the current best available market price. Read more on Market Orders
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
sor_limit_ioc
object

Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it will immediately Fill; any remaining quantity is canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
limit_limit_gtc
object

Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
post_only
boolean

Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected.
​
limit_limit_gtd
object

Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
post_only
boolean

Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected.
​
limit_limit_fok
object

Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it is to immediately and completely Fill. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
twap_limit_gtd
object

A time-weighted average price (TWAP) order type that calculates the average price of a product to programmatically execute an order over a specified duration.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
start_time
RFC3339 Timestamp

Time at which the order should begin executing.
Example: 2021-05-31T07:59:59Z
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
number_buckets
string

The number of smaller buckets/suborders over which the entire order will be broken into. Each suborder will be executed over a duration calculated based on the end_time
Example: 5
bucket_size
string

The size of each suborder. bucket_size multiplied by number_buckets should match the size of the entire twap order)
Example: 2.00
bucket_duration
string

The duration over which each sub order was executed
Example: 300s
stop_limit_stop_limit_gtc
object

Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until canceled. Read more on Stop-Limit Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_price
string

The specified price that will trigger the placement of the Order.
Example: 20000.00
stop_direction
string

The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.

Possible values: [STOP_DIRECTION_STOP_UP, STOP_DIRECTION_STOP_DOWN]
​
stop_limit_stop_limit_gtd
object

Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order. Read more on Stop-Limit Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_price
string

The specified price that will trigger the placement of the Order.
Example: 20000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
stop_direction
string

The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.

Possible values: [STOP_DIRECTION_STOP_UP, STOP_DIRECTION_STOP_DOWN]
​
trigger_bracket_gtc
object

A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until canceled. Read more on Bracket Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_trigger_price
string

The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS.
Example: 20000.00
trigger_bracket_gtd
object

A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. Read more on Bracket Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_trigger_price
string

The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS.
Example: 20000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
leverage
string

The amount of leverage for the order (default is 1.0).
Example: 2.0
margin_type
string

Margin Type for this order (default is CROSS).

Possible values: [CROSS, ISOLATED]
​
retail_portfolio_id
string

(Deprecated) The ID of the portfolio to associate the order with. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.
Example: 11111111-1111-1111-1111-111111111111
preview_id
string

Preview ID for this order, to associate this order with a preview request
Example: b40bbff9-17ce-4726-8b64-9de7ae57ad26
attached_order_configuration
object

The configuration of the attached order. Only TriggerBracketGtc is eligible. Size field must be omitted as the size of the attached order is the same as that of the parent order.
market_market_ioc
object

Buy or sell a specified quantity of an Asset at the current best available market price. Read more on Market Orders
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
sor_limit_ioc
object

Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it will immediately Fill; any remaining quantity is canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
limit_limit_gtc
object

Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
post_only
boolean

Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected.
​
limit_limit_gtd
object

Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
post_only
boolean

Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected.
​
limit_limit_fok
object

Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it is to immediately and completely Fill. Read more on Limit Orders.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
twap_limit_gtd
object

A time-weighted average price (TWAP) order type that calculates the average price of a product to programmatically execute an order over a specified duration.
quote_size
string

The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.
Example: 10.00
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
start_time
RFC3339 Timestamp

Time at which the order should begin executing.
Example: 2021-05-31T07:59:59Z
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
number_buckets
string

The number of smaller buckets/suborders over which the entire order will be broken into. Each suborder will be executed over a duration calculated based on the end_time
Example: 5
bucket_size
string

The size of each suborder. bucket_size multiplied by number_buckets should match the size of the entire twap order)
Example: 2.00
bucket_duration
string

The duration over which each sub order was executed
Example: 300s
stop_limit_stop_limit_gtc
object

Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until canceled. Read more on Stop-Limit Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_price
string

The specified price that will trigger the placement of the Order.
Example: 20000.00
stop_direction
string

The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.

Possible values: [STOP_DIRECTION_STOP_UP, STOP_DIRECTION_STOP_DOWN]
​
stop_limit_stop_limit_gtd
object

Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order. Read more on Stop-Limit Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_price
string

The specified price that will trigger the placement of the Order.
Example: 20000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z
stop_direction
string

The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.

Possible values: [STOP_DIRECTION_STOP_UP, STOP_DIRECTION_STOP_DOWN]
​
trigger_bracket_gtc
object

A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until canceled. Read more on Bracket Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_trigger_price
string

The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS.
Example: 20000.00
trigger_bracket_gtd
object

A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. Read more on Bracket Orders.
base_size
string

The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.
Example: 0.001
limit_price
string

The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price.
Example: 10000.00
stop_trigger_price
string

The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS.
Example: 20000.00
end_time
RFC3339 Timestamp

The time at which the order will be cancelled if it is not Filled.
Example: 2021-05-31T09:59:59Z


Cancel Orders
POST

https://api.coinbase.com/api/v3/brokerage/orders/batch_cancel

Initiate cancel requests for one or more orders.
Body params
order_ids
string[]
required

The order IDs that cancel requests should be initiated for.
Example: 0000-00000,1111-11111

request:
curl -L 'https://api.coinbase.com/api/v3/brokerage/orders/batch_cancel' \
-H 'Content-Type: application/json' \
-d '{"order_ids":["0000-00000,1111-11111"]}'

response:
{
  "results": {
    "success": true,
    "failure_reason": "UNKNOWN_CANCEL_FAILURE_REASON",
    "order_id": "0000-00000"
  }
}


Edit Order
POST

https://api.coinbase.com/api/v3/brokerage/orders/edit

Edit an order with a specified new size, or new price.
Body params
order_id
string
required

The ID of the order.
price
string
required

The update price of the order.
Example: 19000.00
size
string
required

The updated size of the order.
Example: 0.001

rewquest:
const axios = require('axios');

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/orders/edit',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


response:
{
  "success": true,
  "errors": {
    "edit_failure_reason": "UNKNOWN_EDIT_ORDER_FAILURE_REASON",
    "preview_failure_reason": "UNKNOWN_PREVIEW_FAILURE_REASON"
  }
}

Edit Order Preview
POST

https://api.coinbase.com/api/v3/brokerage/orders/edit_preview

Preview an edit order request with a specified new size, or new price.
Body params
order_id
string
required

The ID of the order.
price
string
required

The update price of the order.
Example: 19000.00
size
string
required

The updated size of the order.
Example: 0.001

request:
const axios = require('axios');

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/orders/edit_preview',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});



response:
{
  "errors": {
    "edit_failure_reason": "UNKNOWN_EDIT_ORDER_FAILURE_REASON",
    "preview_failure_reason": "UNKNOWN_PREVIEW_FAILURE_REASON"
  },
  "slippage": "string",
  "order_total": "string",
  "commission_total": "string",
  "quote_size": 10,
  "base_size": 0.001,
  "best_bid": "string",
  "best_ask": "string",
  "average_filled_price": "string"
}

Get Order
GET

https://api.coinbase.com/api/v3/brokerage/orders/historical/{order_id}

Get a single order by order ID.
Path Params
order_id
string
required

The ID of the order.
Query Params
client_order_id
string

(Deprecated) Client Order ID to fetch the order with.
user_native_currency
string

(Deprecated) Native currency to fetch order with. Default is USD.

reques:
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/orders/historical/:order_id',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


response:
{
  "order": {
    "order_id": "0000-000000-000000",
    "product_id": "BTC-USD",
    "user_id": "2222-000000-000000",
    "order_configuration": {
      "market_market_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001"
      },
      "sor_limit_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "limit_limit_gtc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "post_only": false
      },
      "limit_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "post_only": false
      },
      "limit_limit_fok": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "twap_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "start_time": "2021-05-31T07:59:59Z",
        "end_time": "2021-05-31T09:59:59Z",
        "limit_price": "10000.00",
        "number_buckets": "5",
        "bucket_size": "2.00",
        "bucket_duration": "300s"
      },
      "stop_limit_stop_limit_gtc": {
        "base_size": "0.001",
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "stop_direction": "20000.00"
      },
      "stop_limit_stop_limit_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "stop_direction": "20000.00"
      },
      "trigger_bracket_gtc": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00"
      },
      "trigger_bracket_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z"
      }
    },
    "side": "",
    "client_order_id": "11111-000000-000000",
    "status": "PENDING",
    "time_in_force": "UNKNOWN_TIME_IN_FORCE",
    "created_time": "2021-05-31T09:59:59Z",
    "completion_percentage": "50",
    "filled_size": "0.001",
    "average_filled_price": "50",
    "fee": "string",
    "number_of_fills": "2",
    "filled_value": "10000",
    "pending_cancel": true,
    "size_in_quote": false,
    "total_fees": "5.00",
    "size_inclusive_of_fees": false,
    "total_value_after_fees": "string",
    "trigger_status": "UNKNOWN_TRIGGER_STATUS",
    "order_type": "UNKNOWN_ORDER_TYPE",
    "reject_reason": "REJECT_REASON_UNSPECIFIED",
    "settled": "boolean",
    "product_type": "UNKNOWN_PRODUCT_TYPE",
    "reject_message": "string",
    "cancel_message": "string",
    "order_placement_source": "UNKNOWN_PLACEMENT_SOURCE",
    "outstanding_hold_amount": "string",
    "is_liquidation": "boolean",
    "last_fill_time": "string",
    "edit_history": [
      {
        "price": "19000.00",
        "size": "0.001",
        "replace_accept_timestamp": "string"
      }
    ],
    "leverage": "string",
    "margin_type": "",
    "retail_portfolio_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "originating_order_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "attached_order_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "attached_order_configuration": {
      "market_market_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001"
      },
      "sor_limit_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "limit_limit_gtc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "post_only": false
      },
      "limit_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "post_only": false
      },
      "limit_limit_fok": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "twap_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "start_time": "2021-05-31T07:59:59Z",
        "end_time": "2021-05-31T09:59:59Z",
        "limit_price": "10000.00",
        "number_buckets": "5",
        "bucket_size": "2.00",
        "bucket_duration": "300s"
      },
      "stop_limit_stop_limit_gtc": {
        "base_size": "0.001",
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "stop_direction": "20000.00"
      },
      "stop_limit_stop_limit_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "stop_direction": "20000.00"
      },
      "trigger_bracket_gtc": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00"
      },
      "trigger_bracket_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z"
      }
    }
  }
}

List Fills
GET

https://api.coinbase.com/api/v3/brokerage/orders/historical/fills

Get a list of fills filtered by optional query parameters (product_id, order_id, etc).
Query Params
order_ids
string[]

The ID(s) of order(s).
trade_ids
string[]

The ID(s) of the trades of fills.
product_ids
string[]

The ID(s) of the product(s) to filter fills by.
start_sequence_timestamp
RFC3339 Timestamp

Only fills with a trade time after the specified start date are returned.
end_sequence_timestamp
RFC3339 Timestamp

Only fills with a trade time before the specified end date are returned.
retail_portfolio_id
string

(Deprecated) Only fills matching this retail portfolio id are returned. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.
limit
int64

The number of fills to be returned (default is 100).
cursor
string

For paginated responses, returns all responses that come after this value.
sort_by
string

Sort results by a field, results use unstable pagination. Default is sort by creation time
​
Responses
Previous
Get Order
Next
List Orders
Language
Request


const axios = require('axios');
let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/orders/historical/fills?sort_by=PRICE',
  headers: { 
    'Content-Type': 'application/json'
  }
};
axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);

});

Response
{
  "fills": {
    "entry_id": "22222-2222222-22222222",
    "trade_id": "1111-11111-111111",
    "order_id": "0000-000000-000000",
    "trade_time": "2021-05-31T09:59:59Z",
    "trade_type": "FILL",
    "price": "10000.00",
    "size": "0.001",
    "commission": "1.25",
    "product_id": "BTC-USD",
    "sequence_timestamp": "2021-05-31T09:58:59Z",
    "liquidity_indicator": "UNKNOWN_LIQUIDITY_INDICATOR",
    "size_in_quote": false,
    "user_id": "3333-333333-3333333",
    "side": "",
    "retail_portfolio_id": "4444-444444-4444444"
  },
  "cursor": "789100"
}

List Orders
GET

https://api.coinbase.com/api/v3/brokerage/orders/historical/batch

Get a list of orders filtered by optional query parameters (product_id, order_status, etc).
Query Params
order_ids
string[]

ID(s) of order(s).
product_ids
string[]

Optional string of the product ID(s). Defaults to null, or fetch for all products.
product_type
string

Returns orders matching this product type. By default, returns all product types.
​
order_status
string[]

Only returns orders matching the specified order statuses.
time_in_forces
string[]

Only orders matching this time in force(s) are returned. Default is to return all time in forces.
order_types
string[]

Only returns orders matching the specified order types (e.g. MARKET). By default, returns all order types.
order_side
string

Only returns the orders matching the specified side (e.g. 'BUY', 'SELL'). By default, returns all sides.
​
start_date
RFC3339 Timestamp

The start date to fetch orders from (inclusive). If provided, only orders created after this date will be returned.
end_date
RFC3339 Timestamp

The end date to fetch orders from (exclusive). If provided, only orders with creation time before this date will be returned.
order_placement_source
string

Only returns the orders matching this placement source. By default, returns RETAIL_ADVANCED placement source.
​
contract_expiry_type
string

Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.
​
asset_filters
string[]

Only returns the orders where the quote, base or underlying asset matches the provided asset filter(s) (e.g. 'BTC').
retail_portfolio_id
string

(Deprecated) Only orders matching this retail portfolio id are returned. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.
limit
int32

The number of orders to display per page (no default amount). If has_next is true, additional pages of orders are available to be fetched. Use the cursor parameter to start on a specified page.
cursor
string

For paginated responses, returns all responses that come after this value.
sort_by
string

Sort results by a field, results use unstable pagination. Default is to sort by creation time.
​
user_native_currency
string

(Deprecated) Native currency to fetch order with. Default is USD.
Responses
Previous
List Fills
Next
Preview Order
Language
Request

curl -L 'https://api.coinbase.com/api/v3/brokerage/orders/historical/batch' \
-H 'Content-Type: application/json'

Response
{
  "orders": {
    "order_id": "0000-000000-000000",
    "product_id": "BTC-USD",
    "user_id": "2222-000000-000000",
    "order_configuration": {
      "market_market_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001"
      },
      "sor_limit_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "limit_limit_gtc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "post_only": false
      },
      "limit_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "post_only": false
      },
      "limit_limit_fok": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "twap_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "start_time": "2021-05-31T07:59:59Z",
        "end_time": "2021-05-31T09:59:59Z",
        "limit_price": "10000.00",
        "number_buckets": "5",
        "bucket_size": "2.00",
        "bucket_duration": "300s"
      },
      "stop_limit_stop_limit_gtc": {
        "base_size": "0.001",
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "stop_direction": "20000.00"
      },
      "stop_limit_stop_limit_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "stop_direction": "20000.00"
      },
      "trigger_bracket_gtc": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00"
      },
      "trigger_bracket_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z"
      }
    },
    "side": "",
    "client_order_id": "11111-000000-000000",
    "status": "PENDING",
    "time_in_force": "UNKNOWN_TIME_IN_FORCE",
    "created_time": "2021-05-31T09:59:59Z",
    "completion_percentage": "50",
    "filled_size": "0.001",
    "average_filled_price": "50",
    "fee": "string",
    "number_of_fills": "2",
    "filled_value": "10000",
    "pending_cancel": true,
    "size_in_quote": false,
    "total_fees": "5.00",
    "size_inclusive_of_fees": false,
    "total_value_after_fees": "string",
    "trigger_status": "UNKNOWN_TRIGGER_STATUS",
    "order_type": "UNKNOWN_ORDER_TYPE",
    "reject_reason": "REJECT_REASON_UNSPECIFIED",
    "settled": "boolean",
    "product_type": "UNKNOWN_PRODUCT_TYPE",
    "reject_message": "string",
    "cancel_message": "string",
    "order_placement_source": "UNKNOWN_PLACEMENT_SOURCE",
    "outstanding_hold_amount": "string",
    "is_liquidation": "boolean",
    "last_fill_time": "string",
    "edit_history": [
      {
        "price": "19000.00",
        "size": "0.001",
        "replace_accept_timestamp": "string"
      }
    ],
    "leverage": "string",
    "margin_type": "",
    "retail_portfolio_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "originating_order_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "attached_order_id": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
    "attached_order_configuration": {
      "market_market_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001"
      },
      "sor_limit_ioc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "limit_limit_gtc": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "post_only": false
      },
      "limit_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "post_only": false
      },
      "limit_limit_fok": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "limit_price": "10000.00"
      },
      "twap_limit_gtd": {
        "quote_size": "10.00",
        "base_size": "0.001",
        "start_time": "2021-05-31T07:59:59Z",
        "end_time": "2021-05-31T09:59:59Z",
        "limit_price": "10000.00",
        "number_buckets": "5",
        "bucket_size": "2.00",
        "bucket_duration": "300s"
      },
      "stop_limit_stop_limit_gtc": {
        "base_size": "0.001",
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "stop_direction": "20000.00"
      },
      "stop_limit_stop_limit_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z",
        "stop_direction": "20000.00"
      },
      "trigger_bracket_gtc": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00"
      },
      "trigger_bracket_gtd": {
        "base_size": 0.001,
        "limit_price": "10000.00",
        "stop_trigger_price": "20000.00",
        "end_time": "2021-05-31T09:59:59Z"
      }
    }
  },
  "sequence": "string",
  "has_next": true,
  "cursor": "789100"
}

ORDER PLACEMENT SOURCE TYPES:
UNKNOWM_PLOACEMENT_SOURCE
RETAIL_SIMPLE
RETAIL_ADVEANCED

SORT BY TYPES
UNKMNOWN_SORT_BY
LIMIT_PRICE
LAST_FILL_TIME



List Payment Methods
GET

https://api.coinbase.com/api/v3/brokerage/payment_methods

Get a list of payment methods for the current user.

const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/payment_methods',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "payment_methods": {
    "id": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
    "type": "ACH",
    "name": "ALLY BANK ******1234",
    "currency": "USD",
    "verified": true,
    "allow_buy": true,
    "allow_sell": true,
    "allow_deposit": true,
    "allow_withdraw": true,
    "created_at": "2021-05-31T09:59:59Z",
    "updated_at": "2021-05-31T09:59:59Z"
  }
}


Get Payment Method
GET

https://api.coinbase.com/api/v3/brokerage/payment_methods/{payment_method_id}

Get information about a payment method for the current user.


Get Best Bid/Ask
GET

https://api.coinbase.com/api/v3/brokerage/best_bid_ask

Get the best bid/ask for all products. A subset of all products can be returned instead by using the product_ids input.
Query Params
product_ids
string[]

The list of trading pairs (e.g. 'BTC-USD').
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/best_bid_ask?product_ids=BTC-USD',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});

{
  "pricebooks": {
    "product_id": "BTC-USD",
    "bids": [
      {
        "price": "string",
        "size": "string"
      }
    ],
    "asks": [
      {
        "price": "string",
        "size": "string"
      }
    ],
    "time": "string"
  }
}



Get Market Trades
GET

https://api.coinbase.com/api/v3/brokerage/products/{product_id}/ticker

Get snapshot information by product ID about the last trades (ticks) and best bid/ask.
Path Params
product_id
string
required

The trading pair (e.g. 'BTC-USD').
Query Params
limit
int32
required

The number of trades to be returned.
start
string

The UNIX timestamp indicating the start of the time interval.
end
string

The UNIX timestamp indicating the end of the time interval.
curl -L 'https://api.coinbase.com/api/v3/brokerage/products/:product_id/ticker' \
-H 'Content-Type: application/json'

{
  "trades": {
    "trade_id": "34b080bf-fcfd-445a-832b-46b5ddc65601",
    "product_id": "BTC-USD",
    "price": "140.91",
    "size": "4",
    "time": "2021-05-31T09:59:59Z",
    "side": "",
    "exchange": "string"
  },
  "best_bid": "291.13",
  "best_ask": "292.40"
}


Get Product
GET

https://api.coinbase.com/api/v3/brokerage/products/{product_id}

Get information on a single product by product ID.
Path Params
product_id
string
required

The trading pair (e.g. 'BTC-USD').
Query Params
get_tradability_status
boolean

Whether or not to populate view_only with the tradability status of the product. This is only enabled for SPOT products.
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/products/:product_id',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "product_id": "BTC-USD",
  "price": "140.21",
  "price_percentage_change_24h": "9.43%",
  "volume_24h": "1908432",
  "volume_percentage_change_24h": "9.43%",
  "base_increment": "0.00000001",
  "quote_increment": "0.00000001",
  "quote_min_size": "0.00000001",
  "quote_max_size": "1000",
  "base_min_size": "0.00000001",
  "base_max_size": "1000",
  "base_name": "Bitcoin",
  "quote_name": "US Dollar",
  "watched": true,
  "is_disabled": "boolean",
  "new": true,
  "status": "string",
  "cancel_only": true,
  "limit_only": true,
  "post_only": true,
  "trading_disabled": "boolean",
  "auction_mode": true,
  "product_type": "string",
  "quote_currency_id": "USD",
  "base_currency_id": "BTC",
  "fcm_trading_session_details": {
    "is_session_open": "boolean",
    "open_time": "string",
    "close_time": "string",
    "session_state": "FCM_TRADING_SESSION_STATE_UNDEFINED",
    "after_hours_order_entry_disabled": "boolean",
    "closed_reason": "FCM_TRADING_SESSION_CLOSED_REASON_UNDEFINED",
    "maintenance": {
      "start_time": "string",
      "end_time": "string"
    }
  },
  "mid_market_price": "140.22",
  "alias": "BTC-USD",
  "alias_to": [
    "BTC-USDC"
  ],
  "base_display_symbol": "BTC",
  "quote_display_symbol": "USD",
  "view_only": true,
  "price_increment": "0.00000001",
  "display_name": "BTC PERP",
  "product_venue": "neptune",
  "approximate_quote_24h_volume": "1908432",
  "new_at": "2021-07-01T00:00:00Z",
  "future_product_details": {
    "venue": "string",
    "contract_code": "string",
    "contract_expiry": "string",
    "contract_size": "string",
    "contract_root_unit": "string",
    "group_description": "string",
    "contract_expiry_timezone": "string",
    "group_short_description": "string",
    "risk_managed_by": "UNKNOWN_RISK_MANAGEMENT_TYPE",
    "contract_expiry_type": "UNKNOWN_CONTRACT_EXPIRY_TYPE",
    "perpetual_details": {
      "open_interest": "string",
      "funding_rate": "string",
      "funding_time": "string",
      "max_leverage": "string",
      "base_asset_uuid": "string",
      "underlying_type": "string"
    },
    "contract_display_name": "string",
    "time_to_expiry_ms": "string",
    "non_crypto": "boolean",
    "contract_expiry_name": "string",
    "twenty_four_by_seven": "boolean"
  }
}

Get Product Book
GET

https://api.coinbase.com/api/v3/brokerage/product_book

Get a list of bids/asks for a single product. The amount of detail shown can be customized with the limit parameter.
Query Params
product_id
string
required

The trading pair (e.g. 'BTC-USD').
limit
int32

The number of bid/asks to be returned.
aggregation_price_increment
string

The minimum price intervals at which buy and sell orders are grouped or combined in the order book.

const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/product_book',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "pricebook": {
    "product_id": "BTC-USD",
    "bids": [
      {
        "price": "string",
        "size": "string"
      }
    ],
    "asks": [
      {
        "price": "string",
        "size": "string"
      }
    ],
    "time": "string"
  },
  "last": "string",
  "mid_market": "string",
  "spread_bps": "string",
  "spread_absolute": "string"
}


Get Product Candles
GET

https://api.coinbase.com/api/v3/brokerage/products/{product_id}/candles

Get rates for a single product by product ID, grouped in buckets.
Path Params
product_id
string
required

The trading pair (e.g. 'BTC-USD').
Query Params
start
string
required

The UNIX timestamp indicating the start of the time interval.
end
string
required

The UNIX timestamp indicating the end of the time interval.
granularity
string
required

The timeframe each candle represents.
​
limit
int32

The number of candle buckets to be returned. By default, returns 350 (max 350).

const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/products/:product_id/candles?granularity=FIVE_MINUTE&limit=1',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "candles": {
    "start": "1639508050",
    "low": "140.21",
    "high": "140.21",
    "open": "140.21",
    "close": "140.21",
    "volume": "56437345"
  }
}


List Products
GET

https://api.coinbase.com/api/v3/brokerage/products

Get a list of the available currency pairs for trading.
Query Params
limit
int32

The number of products to be returned.
offset
int32

The number of products to skip before returning.
product_type
string

Only returns the orders matching this product type. By default, returns all product types.
​
product_ids
string[]

The list of trading pairs (e.g. 'BTC-USD').
contract_expiry_type
string

Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.
​
expiring_contract_status
string

Only returns contracts with this status (default is UNEXPIRED).
​
get_tradability_status
boolean

Whether or not to populate view_only with the tradability status of the product. This is only enabled for SPOT products.
​
get_all_products
boolean

If true, return all products of all product types (including expired futures contracts).
​
products_sort_order
string

The order in which products are returned. By default, products are returned in 24 hour volume descending (in quote).
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/products?product_type=SPOT&contract_expiry_type=PERPETUAL&expiring_contract_status=STATUS_ALL&products_sort_order=PRODUCTS_SORT_ORDER_VOLUME_24H_DESCENDING',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "products": {
    "product_id": "BTC-USD",
    "price": "140.21",
    "price_percentage_change_24h": "9.43%",
    "volume_24h": "1908432",
    "volume_percentage_change_24h": "9.43%",
    "base_increment": "0.00000001",
    "quote_increment": "0.00000001",
    "quote_min_size": "0.00000001",
    "quote_max_size": "1000",
    "base_min_size": "0.00000001",
    "base_max_size": "1000",
    "base_name": "Bitcoin",
    "quote_name": "US Dollar",
    "watched": true,
    "is_disabled": false,
    "new": true,
    "status": "string",
    "cancel_only": true,
    "limit_only": true,
    "post_only": true,
    "trading_disabled": false,
    "auction_mode": true,
    "product_type": "UNKNOWN_PRODUCT_TYPE",
    "quote_currency_id": "USD",
    "base_currency_id": "BTC",
    "fcm_trading_session_details": {
      "is_session_open": "boolean",
      "open_time": "string",
      "close_time": "string",
      "session_state": "FCM_TRADING_SESSION_STATE_UNDEFINED",
      "after_hours_order_entry_disabled": "boolean",
      "closed_reason": "FCM_TRADING_SESSION_CLOSED_REASON_UNDEFINED",
      "maintenance": {
        "start_time": "string",
        "end_time": "string"
      }
    },
    "mid_market_price": "140.22",
    "alias": "BTC-USD",
    "alias_to": [
      "string"
    ],
    "base_display_symbol": "BTC",
    "quote_display_symbol": "USD",
    "view_only": true,
    "price_increment": "0.00000001",
    "display_name": "BTC PERP",
    "product_venue": "neptune",
    "approximate_quote_24h_volume": "1908432",
    "new_at": "2021-07-01T00:00:00Z",
    "future_product_details": {
      "venue": "string",
      "contract_code": "string",
      "contract_expiry": "string",
      "contract_size": "string",
      "contract_root_unit": "string",
      "group_description": "string",
      "contract_expiry_timezone": "string",
      "group_short_description": "string",
      "risk_managed_by": "UNKNOWN_RISK_MANAGEMENT_TYPE",
      "contract_expiry_type": "UNKNOWN_CONTRACT_EXPIRY_TYPE",
      "perpetual_details": {
        "open_interest": "string",
        "funding_rate": "string",
        "funding_time": "string",
        "max_leverage": "string",
        "base_asset_uuid": "string",
        "underlying_type": "string"
      },
      "contract_display_name": "string",
      "time_to_expiry_ms": "string",
      "non_crypto": "boolean",
      "contract_expiry_name": "string",
      "twenty_four_by_seven": "boolean"
    }
  },
  "num_products": 100
}



List Public Products
GET

https://api.coinbase.com/api/v3/brokerage/market/products

Get a list of the available currency pairs for trading.
Query Params
limit
int32

The number of products to be returned.
offset
int32

The number of products to skip before returning.
product_type
string

Only returns the orders matching this product type. By default, returns all product types.
​
product_ids
string[]

The list of trading pairs (e.g. 'BTC-USD').
contract_expiry_type
string

Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.
​
expiring_contract_status
string

Only returns contracts with this status (default is UNEXPIRED).
​
get_all_products
boolean

If true, return all products of all product types (including expired futures contracts).
​
products_sort_order
string

The order in which products are returned. By default, products are returned in 24 hour volume descending (in quote).
const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://api.coinbase.com/api/v3/brokerage/market/products?product_type=FUTURE&product_ids=BTC-USD&contract_expiry_type=PERPETUAL&expiring_contract_status=STATUS_ALL&products_sort_order=PRODUCTS_SORT_ORDER_VOLUME_24H_DESCENDING',
  headers: { 
    'Content-Type': 'application/json'
  }
};

axios.request(config)
.then((response) => {
  console.log(JSON.stringify(response.data));
})
.catch((error) => {
  console.log(error);
});


{
  "products": {
    "product_id": "BTC-USD",
    "price": "140.21",
    "price_percentage_change_24h": "9.43%",
    "volume_24h": "1908432",
    "volume_percentage_change_24h": "9.43%",
    "base_increment": "0.00000001",
    "quote_increment": "0.00000001",
    "quote_min_size": "0.00000001",
    "quote_max_size": "1000",
    "base_min_size": "0.00000001",
    "base_max_size": "1000",
    "base_name": "Bitcoin",
    "quote_name": "US Dollar",
    "watched": true,
    "is_disabled": false,
    "new": true,
    "status": "string",
    "cancel_only": true,
    "limit_only": true,
    "post_only": true,
    "trading_disabled": false,
    "auction_mode": true,
    "product_type": "UNKNOWN_PRODUCT_TYPE",
    "quote_currency_id": "USD",
    "base_currency_id": "BTC",
    "fcm_trading_session_details": {
      "is_session_open": "boolean",
      "open_time": "string",
      "close_time": "string",
      "session_state": "FCM_TRADING_SESSION_STATE_UNDEFINED",
      "after_hours_order_entry_disabled": "boolean",
      "closed_reason": "FCM_TRADING_SESSION_CLOSED_REASON_UNDEFINED",
      "maintenance": {
        "start_time": "string",
        "end_time": "string"
      }
    },
    "mid_market_price": "140.22",
    "alias": "BTC-USD",
    "alias_to": [
      "string"
    ],
    "base_display_symbol": "BTC",
    "quote_display_symbol": "USD",
    "view_only": true,
    "price_increment": "0.00000001",
    "display_name": "BTC PERP",
    "product_venue": "neptune",
    "approximate_quote_24h_volume": "1908432",
    "new_at": "2021-07-01T00:00:00Z",
    "future_product_details": {
      "venue": "string",
      "contract_code": "string",
      "contract_expiry": "string",
      "contract_size": "string",
      "contract_root_unit": "string",
      "group_description": "string",
      "contract_expiry_timezone": "string",
      "group_short_description": "string",
      "risk_managed_by": "UNKNOWN_RISK_MANAGEMENT_TYPE",
      "contract_expiry_type": "UNKNOWN_CONTRACT_EXPIRY_TYPE",
      "perpetual_details": {
        "open_interest": "string",
        "funding_rate": "string",
        "funding_time": "string",
        "max_leverage": "string",
        "base_asset_uuid": "string",
        "underlying_type": "string"
      },
      "contract_display_name": "string",
      "time_to_expiry_ms": "string",
      "non_crypto": "boolean",
      "contract_expiry_name": "string",
      "twenty_four_by_seven": "boolean"
    }
  },
  "num_products": 100
}



prompt:
so i want to create a trading platform where users can connect to and then trade. so programmatically i will write some logic and then use conbase to execute the trades so now the question is how do i use coinbase to create this where i can create an order book trade which uses take profit stop loss and lot sixe for BUY SELL BUY LIMIT SELL LIMIT and other trade types for order book


